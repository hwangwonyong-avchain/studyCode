apiVersion: apps/v1 # 현재 최신 apiVersion은 kubernetes 웹 페이지나 구글링을 통해 찾아보자.
kind: Deployment # 생성하려는 항목
metadata: # 생성하는 객체의 이름과 같은 중요 데이터가 들어간다.
  name: second-app-deployment
  labels:
    group: example # -l 플래그를 사용하여 레이블 별로 명령을 내릴 수 있다. 
  # ex) kubectl delete deployments,services -l group=example -> 이 레이블을 가진 deployments와 services를 삭제하는 명령어.
spec: # yaml 파일의 핵심이며, deployment를 구성하는 방법을 정의 
  replicas: 1 # 디폴트 값으로 가지고자 하는 pod 인스턴스의 수 (기본은 1개) 
  selector:
    matchLabels: # deployment 객체가 제어할 pod 레이블의 키-값 쌍을 추가
      app: second-app
      tier: backend
      # deployment에 속한 pod를 deployment에게 알려주는 역할이다.
  template: # 생성하고자 하는 pod를 정의한다. 따라서 kind는 적을 필요없다. pod를 정의하는 것이기 때문.
    metadata: # 위의 metadata는 deployment 객체에 대한 것이고, 이 metadata는 pod 객체에 대한 것이다.
      labels: # 키: value의 형태로 key든 value든 원하는대로 지정 가능
        app: second-app
        tier: backend
    spec: # pod를 구성하는 방법을 정의
      containers:
        - name: second-node
          image: wonyongg/kub-first-app:2
          imagePullPolicy: Always # deployment 객체의 변화를 감지하여 태그가 같더라도 변화가 있다면 이미지를 당겨온다.
          livenessProbe: # 활성 프로브로 컨테이너가 실행중인지 지속적으로 확인하는 데 사용된다.
            httpGet:  # HTTP GET 요청을 사용하여 컨테이너의 상태를 확인한다.
              path: / # HTTP 요청 경로는 "/"로 설정된다.
              port: 8080 # HTTP GET 요청을 보낼 포트는 8080으로 설정된다.
            periodSeconds: 10 # 컨테이너 상태를 확인하기 위해 프로브가 10초마다 실행된다.
            initialDelaySeconds: 5 # 첫 번쨰 프로브가 실행되기 전 초기 지연으로 5초가 설정된다.

        # - name: ...
          # image: ... 